package com.example.myandroidstores.http;

import java.io.UnsupportedEncodingException;
import java.net.SocketTimeoutException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;

import android.content.Context;

import com.example.myandroidstores.Log.ILog;

public class HttpUtils {

	/**
	 * Get请求
	 * 
	 * @param url
	 *            请求的路径
	 * @param param
	 *            请求的参数
	 * @return
	 */
	public static String httpGet(String url, Map<String, String> param,Context con) {
		String paramStr = "";
		String requestStr = null;
		if (param == null) {
			param = new HashMap<String, String>();
		}
		
		List<BasicNameValuePair> params = new LinkedList<BasicNameValuePair>();
		Iterator<Entry<String, String>> iter = param.entrySet().iterator();
		while (iter.hasNext()) {
			Entry<String, String> en = iter.next();
			params.add(new BasicNameValuePair(en.getKey(), en.getValue()));
			//ILog.i(TAG, en.getKey()+"---------------------------"+ en.getValue());
		}
		paramStr = URLEncodedUtils.format(params, "UTF-8");
		
		HttpGet getMethod = new HttpGet( url
				+ (paramStr.equals("") ? "" : "?") + paramStr);
		HttpParams httpParams = new BasicHttpParams();
		HttpConnectionParams.setConnectionTimeout(httpParams, TIME_OUT);
		HttpConnectionParams.setSoTimeout(httpParams, TIME_OUT);
		HttpClient httpClient = new DefaultHttpClient(httpParams);
		
		
		HttpResponse response = null;
		getMethod.setHeader("User-Agent", "android_api");
		try {
			response = httpClient.execute(getMethod); // 发起GET请求
			if (response.getStatusLine().getStatusCode() != 200) {
				return null;
			}
			requestStr = EntityUtils.toString(response.getEntity(), "utf-8");// 获取服务器响应内容
		}catch(SocketTimeoutException ex){
			return null;
		}catch(ConnectTimeoutException ex){
			return null;
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return requestStr;
	}



	/**
	 * POST请求
	 * 
	 * @param url
	 *            请求的路径
	 * @param param
	 *            请求的参数
	 * @return
	 */
	public static String httpPost(String url, Map<String, String> param,Context con) {
		String requestStr = null;
		HttpPost postMethod = new HttpPost(url);
		if (param == null) {
			param = new HashMap<String, String>();
		}

		List<BasicNameValuePair> params = new LinkedList<BasicNameValuePair>();
		Iterator<Entry<String, String>> iter = param.entrySet().iterator();
		while (iter.hasNext()) {
			Entry<String, String> en = iter.next();
			params.add(new BasicNameValuePair(en.getKey(), en.getValue()));
		}
		try {
			postMethod.setEntity(new UrlEncodedFormEntity(params,
					HTTP.UTF_8));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return null;
		}
		
		HttpParams httpParams = new BasicHttpParams();
		HttpConnectionParams.setConnectionTimeout(httpParams, TIME_OUT);
		HttpConnectionParams.setSoTimeout(httpParams, TIME_OUT);
		DefaultHttpClient httpClient = new DefaultHttpClient(httpParams);

		
		try {
			HttpResponse response = httpClient.execute(postMethod);
			if (response.getStatusLine().getStatusCode() != 200) {
				return null;
			}
			requestStr = EntityUtils.toString(response.getEntity(), "utf-8");
		}catch(SocketTimeoutException ex){

			return null;
		} catch(ConnectTimeoutException ex){
			return null;
		}catch (Exception e) {
			e.printStackTrace();
			return null;
		}

		return requestStr;
	}
	
}
